{"version":3,"sources":["components/SearchBox/SearchBox.tsx","constants.ts","reducers/index.ts","context/StateProvider/index.tsx","components/Info/Info.tsx","components/UsersList/UsersList.tsx","context/initialState.ts","config.ts","services/users.ts","layouts/Landing/Landing.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SearchBox","ActionType","props","className","type","placeholder","onChange","handleChange","reducer","state","action","UPDATE_USERS","users","data","UPDATE_LOADING","loading","StateContext","createContext","Provider","StateProvider","initialState","children","useReducer","dispatch","value","Info","heading","description","UsersList","filteredUsers","useContext","filter","o","Object","keys","some","k","toLowerCase","includes","filterValue","Fragment","map","user","key","id","name","username","email","address","suite","street","city","zipcode","href","phone","website","company","catchPhrase","getUsers","a","request","get","config","init","Landing","useEffect","App","useState","setFilterValue","event","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b08c9355.chunk.js","sourcesContent":["import React from 'react';\nimport './SearchBox.scss';\n\nfunction SearchBox(props: { placeholder: string; handleChange: any }) {\n  return (\n    <div className=\"sticky\">\n      <input\n        className=\"search\"\n        type=\"search\"\n        placeholder={props.placeholder}\n        onChange={props.handleChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;\n","export enum ActionType {\n  UPDATE_USERS,\n  UPDATE_LOADING,\n}\n\nexport interface GenericObject {\n  [key: string]: any;\n}\n","import { ActionType } from '../constants';\nimport { State } from '../context/initialState';\n\nexport default function reducer(\n  state: State,\n  action: { type: ActionType; data: any }\n): State {\n  switch (action.type) {\n    case ActionType.UPDATE_USERS:\n      return { ...state, users: action.data };\n\n    case ActionType.UPDATE_LOADING:\n      return { ...state, loading: action.data };\n  }\n}\n","import React, { createContext, useReducer } from 'react';\nimport reducer from '../../reducers';\nimport { State } from '../initialState';\n\nexport const StateContext = createContext(null);\nconst { Provider } = StateContext;\n\nconst StateProvider = (props: {\n  initialState: State;\n  children: JSX.Element;\n}): JSX.Element => {\n  const { initialState, children } = props;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  // @ts-ignore\n  return <Provider value={{ state, dispatch }}>{children}</Provider>;\n};\n\nexport default StateProvider;\n","import React from 'react';\nimport './Info.scss';\n\nexport default function Info(props: {\n  heading: string;\n  value: string | JSX.Element;\n  description?: string;\n}): JSX.Element {\n  return (\n    <div className=\"information\">\n      <h4 className=\"heading\">{props.heading}</h4>\n      <p className=\"value\">{props.value}</p>\n      {props.description ? (\n        <p className=\"description\">{`${props.description}`}</p>\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n}\n","import React, { useContext } from 'react';\nimport { User } from '../../context/initialState';\nimport { StateContext } from '../../context/StateProvider';\nimport './UsersList.scss';\nimport Info from '../Info';\n\nexport default function UsersList(props: { filterValue: string }): JSX.Element {\n  // @ts-ignore\n  const { state } = useContext(StateContext);\n  const { users } = state;\n\n  let filteredUsers = users.filter((o: any) =>\n    Object.keys(o).some(\n      (k) =>\n        typeof o[k] === 'string' &&\n        o[k].toLowerCase().includes(props.filterValue.toLowerCase())\n    )\n  );\n\n  return (\n    <React.Fragment>\n      <div>\n        {filteredUsers.map((user: User) => (\n          <div className=\"list\" key={user.id}>\n            <Info heading=\"name\" value={user.name} />\n            <Info heading=\"username\" value={user.username} />\n            <Info heading=\"email\" value={user.email} />\n            <Info\n              heading=\"address\"\n              value={`${user.address.suite}, ${user.address.street}, ${user.address.city}, ${user.address.zipcode}`}\n            />\n            <Info\n              heading=\"phone\"\n              value={<a href={`tel:${user.phone}`}>{user.phone}</a>}\n            />\n            <Info\n              heading=\"website\"\n              value={user.website}\n              description={`${user.company.catchPhrase}`}\n            />\n          </div>\n        ))}\n      </div>\n    </React.Fragment>\n  );\n}\n","export interface User {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n  address: {\n    street: string;\n    suite: string;\n    city: string;\n    zipcode: string;\n    geo: {\n      lat: string;\n      lng: string;\n    };\n  };\n  phone: string;\n  website: string;\n  company: {\n    name: string;\n    catchPhrase: string;\n    bs: string;\n  };\n}\nexport interface State {\n  users: User[];\n  loading: boolean;\n}\n\nconst initialState = {\n  users: [],\n  loading: true,\n} as State;\n\nexport default initialState;\n","export default {\n  apiBaseUrl: 'https://jsonplaceholder.typicode.com',\n};\n","import config from '../config';\nimport request from 'axios';\n\nconst getUsers = async (): Promise<any> => {\n  const users = await request.get(`${config.apiBaseUrl}/users`);\n  return users.data;\n};\n\nexport { getUsers };\n","import React, { useContext, useEffect } from 'react';\nimport { ActionType } from '../../constants';\nimport { StateContext } from '../../context/StateProvider';\nimport { getUsers } from '../../services/users';\nimport './Landing.scss';\n\nconst init = async (dispatch: React.Dispatch<any>): Promise<void> => {\n  const users = await getUsers();\n  dispatch({\n    type: ActionType.UPDATE_USERS,\n    data: users,\n  });\n  dispatch({\n    type: ActionType.UPDATE_LOADING,\n    data: false,\n  });\n};\n\nexport default function Landing(props: { children: JSX.Element }): JSX.Element {\n  // @ts-ignore\n  const { state, dispatch } = useContext(StateContext);\n  const { loading } = state;\n  const { children } = props;\n\n  useEffect(() => {\n    if (loading) {\n      init(dispatch);\n    }\n  }, [dispatch, loading]);\n\n  if (loading) {\n    return (\n      <React.Fragment>\n        <div className=\"loading\">loading...</div>\n      </React.Fragment>\n    );\n  }\n  return <React.Fragment>{children}</React.Fragment>;\n}\n","import React, { useState } from 'react';\nimport SearchBox from './components/SearchBox';\nimport UsersList from './components/UsersList';\nimport initialState from './context/initialState';\nimport StateProvider from './context/StateProvider';\nimport Landing from './layouts/Landing';\n\nfunction App() {\n  const [filterValue, setFilterValue] = useState('');\n\n  function handleSearch(event: React.ChangeEvent<HTMLInputElement>) {\n    setFilterValue(event.target.value);\n  }\n\n  return (\n    <StateProvider initialState={initialState}>\n      <Landing>\n        <>\n          <SearchBox\n            placeholder=\"Search for Users...\"\n            handleChange={handleSearch}\n          />\n          <UsersList filterValue={filterValue} />\n        </>\n      </Landing>\n    </StateProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}